Class {
	#name : 'NextcloudLoginFlowAgent',
	#superclass : 'Object',
	#instVars : [
		'loginName',
		'proxyEnabled',
		'appPassword',
		'username',
		'url'
	],
	#category : 'NdevNextcloudApplication'
}

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
NextcloudLoginFlowAgent class >> _PRAGMA_IS_ [

	"%%PRAGMA DECLARE
	(name: IS_NextcloudLoginFlowAgent isPool: true isConstant: false)
	(pool: IS_NextcloudLoginFlowAgent declarations: (
		(name: IS_instanceInterfaceSpec isConstant: false)
	))"


]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
NextcloudLoginFlowAgent class >> abtPrimFlushInterfaceSpecCache [

	IS_NextcloudLoginFlowAgent associationsDo: [ :poolDictionaryAssoc | poolDictionaryAssoc value: nil. ].
	super abtPrimFlushInterfaceSpecCache.
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
NextcloudLoginFlowAgent class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_NextcloudLoginFlowAgent::IS_instanceInterfaceSpec notNil ifTrue: [ IS_NextcloudLoginFlowAgent::IS_instanceInterfaceSpec. ]
	ifFalse: [ IS_NextcloudLoginFlowAgent::IS_instanceInterfaceSpec := AbtInterfaceSpec new. ]
]

{ #category : 'Initialize' }
NextcloudLoginFlowAgent class >> withUrl: anUrl username: anUsername [
	" "

	^self new
		initWithUrl: anUrl username: anUsername;
		yourself
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> appPassword [
	"Return the value of appPassword."

	^appPassword
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> appPassword: aString [
	"Save the value of appPassword."

	appPassword := aString.
]

{ #category : 'HTTP operations' }
NextcloudLoginFlowAgent >> executeHttpOperation: anOperation withArguments: anArray url: anUrlObject [
	" "

	| aTransportScheme anHttpClient aResponse |

	self vfDebug: [ 'executeHttpOperation:withArguments:url: %1, %2' bindWith: anOperation with: anUrlObject. ].

	aTransportScheme := 'httpsl'.
	aTransportScheme := anUrlObject localEndpointUrl transport.

	(anHttpClient := SstHttpClient forTransportScheme: aTransportScheme)
		startUp;
		proxyEnabled: self proxyEnabled;
		yourself.

	[
		aResponse :=
			[ anHttpClient perform: anOperation withArguments: anArray. ]
				on: ExAll
				do: [ :aSignal |
					self vfDebug: [
						'executeHttpOperation:withArguments:url: error %1' bindWith: aSignal description.
					].

					aSignal exitWith: (SstError for: 4711 with: aSignal description).
				].
	]
		ensure: [ anHttpClient shutDown. ].

	^(aResponse notNil and: [ aResponse isSstError not and: [ aResponse header status = '200 OK'. ]. ])
		ifTrue: [
			(aResponse header contentType notNil
				and: [ (aResponse header contentType indexOfSubCollection: 'json') > 0. ])
					ifTrue: [ NeoJSONObject fromString: aResponse contents asString. ]
					ifFalse: [ aResponse contents asString. ].
		]
		ifFalse: [
			| anHttpStatus stream |

			aResponse notNil
				ifTrue: [
					(aResponse errorObject isKindOf: String)
						ifTrue: [
							self vfDebug: [
								'executeHttpOperation:withArguments:url: error %1, %2'
									bindWith: aResponse
									with: aResponse errorObject.
							].
							nil.
						]
						ifFalse: [
							anHttpStatus := aResponse errorObject header status.

							anHttpStatus = '302 Found'
								ifTrue: [ nil. ]
								ifFalse: [
									stream := WriteStream on: String new.
									aResponse errorObject header dumpOn: stream.

									self vfDebug: [
										'executeHttpOperation:withArguments:url: error %1, %2'
											bindWith: aResponse
											with: stream contents.
									].

									nil.
								].
						].
				].
		]
]

{ #category : 'Initialize' }
NextcloudLoginFlowAgent >> initWithUrl: anUrl username: anUsername [
	" "

	self
		proxyEnabled: false;

		url: anUrl;
		username: anUsername;
		yourself.
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> loginName [
	"Return the value of loginName."

	^loginName
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> loginName: aString [
	"Save the value of loginName."

	loginName := aString.
]

{ #category : 'Commands' }
NextcloudLoginFlowAgent >> performDeleteAppPassword [
	"Login flow v2

curl -u username:app-password -X DELETE -H 'OCS-APIREQUEST: true'  http://localhost/ocs/v2.php/core/apppassword
"

	| anUrlString anUrlObject |

	anUrlString := '%1/ocs/v2.php/core/apppassword' bindWith: self url.

	anUrlObject := SstUrl fromString: anUrlString.

	^self
		executeHttpOperation: #delete:typed:using:withHeaders:
		withArguments: (Array with: anUrlObject with: 'application/json' with: nil with: 'OCS-APIREQUEST: true')
		url: anUrlObject
]

{ #category : 'Commands' }
NextcloudLoginFlowAgent >> performLogin [
	"Login flow v2

curl -X POST http://nextcloud.myDomain.at:8080/index.php/login/v2"

	| anUrlString anUrlObject |

	anUrlString := '%1/index.php/login/v2' bindWith: self url.

	anUrlObject := SstUrl fromString: anUrlString.

	^self
		executeHttpOperation: #post:typed:at:
		withArguments: (Array with: nil with: 'application/json' with: anUrlObject)
		url: anUrlObject
]

{ #category : 'Commands' }
NextcloudLoginFlowAgent >> performPollingEndpoint [
	"Login flow v2

curl -X POST https://cloud.example.com/login/v2/poll -d "
	"token=<...>"
	"
"

	| anUrlString anUrlObject result httpClient response plainResponse curl |

	anUrlString := '%1/login/v2/poll' bindWith: self url.

	anUrlObject := SstUrl fromString: anUrlString.

	^self
		executeHttpOperation: #post:typed:at:
		withArguments: (
			Array
				with: ('token=%1' bindWith: self appPassword)
				with: 'application/x-www-form-urlencoded'
				with: anUrlObject)
		url: anUrlObject
]

{ #category : 'Commands' }
NextcloudLoginFlowAgent >> performPollingEndpointUntilOk [
	"Login flow v2

curl -X POST https://cloud.example.com/login/v2/poll -d "
	"token=<...>"
	"
"

	| anHttpStatus maxCount |

	maxCount := 5.

	[
		(Delay forSeconds: 3) wait.
		anHttpStatus := self performPollingEndpoint.
		self vfDebug: [ 'performPollingEndpointUntilOk %1, %2' bindWith: maxCount with: anHttpStatus. ].

		anHttpStatus notNil or: [ maxCount <= 0. ].
	]
		whileFalse: [ maxCount := maxCount - 1. ].

	^anHttpStatus
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> proxyEnabled [
	"Return the value of proxyEnabled."

	^proxyEnabled
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> proxyEnabled: aBoolean [
	"Save the value of proxyEnabled."

	proxyEnabled := aBoolean.
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> url [
	"Return the value of url."

	^url
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> url: aString [
	"Save the value of url."

	url := aString
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> username [
	"Return the value of username."

	^username
]

{ #category : 'Accessors' }
NextcloudLoginFlowAgent >> username: aString [
	"Save the value of username."

	username := aString
]
